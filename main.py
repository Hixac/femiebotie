from bot_interface import Bot, Keyboard, ButtonColor, CallbackType
from async_stuff import throttle
import error_handle as eh
import openrouter_api
import db, tg

bot = Bot()

@bot.tag("/do")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def action(event):
    user = db.get_user(event.author_id)
    ans = event.message[len('/do') + 1:]
    bot.send_message(f"{user.name} {user.sec_name} {ans}", event.peer_id)

@bot.comand("/–≥–µ–º–±–ª", "–≥–µ–º–±–ª–∏–Ω–≥")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def hint_gambling(event):
    bot.send_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≥–µ–º–±–ª [—Å—Ç–∞–≤–∫–∞]\n–ß–µ–º –≤—ã—à–µ —Å—Ç–∞–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä. –ò–≥—Ä–æ–π —è–≤–ª—è–µ—Ç—Å—è –æ—á–∫–æ.", event.peer_id)

@bot.tag("/–≥–µ–º–±–ª", "–≥–µ–º–±–ª–∏–Ω–≥", take_args=1) # TODO: fix the issues with buttons
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def gambling(event):
    class Card:
        def __init__(self, suit, value, extra=""):
            self.s = suit
            self.v = value
            self.extra = extra

        def __str__(self):
            if self.extra:
                return f"{self.s}{self.extra}"
            
            return f"{self.s}{self.v}"

    my_cards = []
    opponent_cards = []
    
    deck = [Card("‚ô†Ô∏è", 1, "—Ç—É–∑"), Card("‚ô†Ô∏è", 2), Card("‚ô†Ô∏è", 3), Card("‚ô†Ô∏è", 4), Card("‚ô†Ô∏è", 5), Card("‚ô†Ô∏è", 6), Card("‚ô†Ô∏è", 7), \
            Card("‚ô†Ô∏è", 8), Card("‚ô†Ô∏è", 9), Card("‚ô†Ô∏è", 10), Card("‚ô†Ô∏è", 2, "–≤–∞–ª–µ—Ç"), Card("‚ô†Ô∏è", 3, "–¥–∞–º–∞"), Card("‚ô†Ô∏è", 4, "–∫–æ—Ä–æ–ª—å"), \
            Card("‚ô•Ô∏è", 1, "—Ç—É–∑"), Card("‚ô•Ô∏è", 2), Card("‚ô•Ô∏è", 3), Card("‚ô•Ô∏è", 4), Card("‚ô•Ô∏è", 5), Card("‚ô•Ô∏è", 6), Card("‚ô•Ô∏è", 7), \
            Card("‚ô•Ô∏è", 8), Card("‚ô•Ô∏è", 9), Card("‚ô•Ô∏è", 10), Card("‚ô•Ô∏è", 2, "–≤–∞–ª–µ—Ç"), Card("‚ô•Ô∏è", 3, "–¥–∞–º–∞"), Card("‚ô•Ô∏è", 4, "–∫–æ—Ä–æ–ª—å"), \
            Card("‚ô¶Ô∏è", 1, "—Ç—É–∑"), Card("‚ô¶Ô∏è", 2), Card("‚ô¶Ô∏è", 3), Card("‚ô¶Ô∏è", 4), Card("‚ô¶Ô∏è", 5), Card("‚ô¶Ô∏è", 6), Card("‚ô¶Ô∏è", 7), \
            Card("‚ô¶Ô∏è", 8), Card("‚ô¶Ô∏è", 9), Card("‚ô¶Ô∏è", 10), Card("‚ô¶Ô∏è", 2, "–≤–∞–ª–µ—Ç"), Card("‚ô¶Ô∏è", 3, "–¥–∞–º–∞"), Card("‚ô¶Ô∏è", 4, "–∫–æ—Ä–æ–ª—å"), \
            Card("‚ô£Ô∏è", 1, "—Ç—É–∑"), Card("‚ô£Ô∏è", 2), Card("‚ô£Ô∏è", 3), Card("‚ô£Ô∏è", 4), Card("‚ô£Ô∏è", 5), Card("‚ô£Ô∏è", 6), Card("‚ô£Ô∏è", 7), \
            Card("‚ô£Ô∏è", 8), Card("‚ô£Ô∏è", 9), Card("‚ô£Ô∏è", 10), Card("‚ô£Ô∏è", 2, "–≤–∞–ª–µ—Ç"), Card("‚ô£Ô∏è", 3, "–¥–∞–º–∞"), Card("‚ô£Ô∏è", 4, "–∫–æ—Ä–æ–ª—å")]
    from random import shuffle
    shuffle(deck)

    def show_my_cards():
        return ' '.join([str(i) for i in my_cards[:min(len(my_cards), 5)]])

    def show_opponent_cards():
        return ' '.join([str(i) for i in opponent_cards[:min(len(opponent_cards), 5)]])

    def my_sum():
        return sum(i.v for i in my_cards[:min(len(my_cards), 5)])

    def opponent_sum():
        return sum(i.v for i in opponent_cards[:min(len(opponent_cards), 5)])

    def end_stage():
        nonlocal bet, playing_with
        ans = ""
        if opponent_sum() > 21:
            ans += "\n\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –≤—Å—è —Å—Ç–∞–≤–∫–∞ –º–æ—è."
            db.sub_coins(playing_with, event.peer_id, bet)
        elif opponent_sum() <= 21 and my_sum() == 21:
            ans += "\n\n–ü–æ–ª–Ω–∞—è –Ω–µ—É–¥–∞—á–∞, –≤—Å—è —Å—Ç–∞–≤–∫–∞ –º–æ—è."
            db.sub_coins(playing_with, event.peer_id, bet)
        elif opponent_sum() <= 21 and my_sum() > 21:
            ans += "\n\n–¢—ã –ø–æ–±–µ–¥–∏–ª, –ø—Ä–∏–∑–Ω–∞—é, –¥–µ—Ä–∂–∏ –º–æ–∏ –±–∞–±–∫–∏."
            db.add_coins(playing_with, event.peer_id, bet)
        elif opponent_sum() > my_sum():
            ans += "\n\n–ì–æ—Å–ø–æ–∂–∞ –£–¥–∞—á–∞ —É–ª—ã–±–∞–µ—Ç—Å—è —Ç–µ–±–µ, –∂—Ä–∏ —Å–≤–æ–∏ –µ–±–∞–Ω—ã–µ —Å–∞—Ç–æ—à–∫–∏."
            db.add_coins(playing_with, event.peer_id, bet)
        elif opponent_sum() <= my_sum():
            ans += "\n\n–°–æ—Å–∏, –ª–º–∞–æ. –Ø –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ –∂–∏–∑–Ω–∏."
            db.sub_coins(playing_with, event.peer_id, bet)
        return ans
            
    @bot.by_callback_type(CallbackType.GAMBLING_GAME_GRAB)
    @eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
    def grab(event):
        nonlocal playing_with, bet
        if event.author_id != playing_with:
            return
        opponent_cards.append(deck.pop())
        my_cards.append(deck.pop())
        ans = f"–¢–≤–æ—è –∫–∞—Ä—Ç–∞ {str(opponent_cards[-1])}"
        if len(opponent_cards) > 1:
            ans = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã {show_opponent_cards()}"
            ans += f"\n–í —Å—É–º–º–µ –±—É–¥–µ—Ç {str(opponent_sum())}"

        kbd = Keyboard(inline=True)
        if len(opponent_cards) < 5:
            kbd.add_callback_button("–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", ButtonColor.PRIMARY, payload={"callback_type": CallbackType.GAMBLING_GAME_GRAB})
            kbd.add_line()
        kbd.add_callback_button("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã", ButtonColor.PRIMARY, payload={"callback_type": CallbackType.GAMBLING_GAME_SHOW})
        bot.edit_message(ans, event.callback_conv_msg_id, event.peer_id, keyboard=kbd.get_keyboard())

    @bot.by_callback_type(CallbackType.GAMBLING_GAME_SHOW)
    @eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
    def show(event):
        nonlocal playing_with, bet
        if event.author_id != playing_with:
            return
        ans = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã {show_opponent_cards()}"
        ans += f"\n–í —Å—É–º–º–µ –±—É–¥–µ—Ç {str(opponent_sum())}"
        ans += f"\n–†–∞—Å–∫—Ä—ã–≤–∞–µ–º—Å—è. –ú–æ–∏ –∫–∞—Ä—Ç—ã: {show_my_cards()}"
        ans += f", —á—Ç–æ –≤ —Å—É–º–º–µ {str(my_sum())}."
        ans += end_stage()
                
        bot.edit_message(ans, event.callback_conv_msg_id, event.peer_id)
        return
    
    bet = event.message.split()[-1]
    if not bet.isnumeric() or int(bet) > db.get_coins(event.author_id, event.peer_id):
        bot.send_message("–°—Ç–∞–≤–∫—É –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —á–∏—Å–ª–∞—Ö, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–≤–æ–∏—Ö —Å–∞—Ç–æ—à.", event.peer_id)
        return

    bet = int(bet)
    playing_with = event.author_id
    user = db.get_user(playing_with)
    
    kbd = Keyboard(inline=True)
    kbd.add_callback_button("–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", ButtonColor.PRIMARY, payload={"callback_type": CallbackType.GAMBLING_GAME_GRAB})
    bot.send_message(f"–ò–≥—Ä–∞ –≤ –û—á–∫–æ —Å {user.name} {user.sec_name} –Ω–∞—á–∞–ª–∞—Å—å.\n\n–Ø –≤—ã—Ç—è–Ω—É–ª –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É.", event.peer_id, keyboard=kbd.get_keyboard())

@bot.tag("—Å–ª–æ—Ç–º–∞—à–∏–Ω–∞", "—Å–ª–æ—Ç –º–∞—à–∏–Ω–∞") # TODO: add button
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def slot_machine(event):

    if db.get_coins(event.author_id, event.peer_id) < 10:
        bot.send_message("–ï–±–∞—Ç—å —Ç—ã –Ω–∏—â—É–≥–∞–Ω, —Å—ä–µ–±–∏ —Å –∫–∞–∑–∏–Ω–æ, —Ç–µ–±–µ —Ç—É—Ç –Ω–µ —Ä–∞–¥—ã.", event.peer_id)
        return
    db.sub_coins(event.author_id, event.peer_id, 10)
    
    from random import choice
    
    emojis = ["‚úÖ", "ü¶à", "‚õ≥", "ü§π", "‚ôÄ", "üá∑üá∫"]

    e1 = choice(emojis)
    e2 = choice(emojis)
    e3 = choice(emojis)
    
    ans = f"""+-----+-----+-----+
| {e1} | {e2} | {e3} |
+-----+-----+-----+"""

    bot.send_message(ans, event.peer_id)
    
    if e1 + e2 + e3 == "üá∑üá∫üá∑üá∫üá∑üá∫":
        db.add_coins(event.author_id, event.peer_id, 2000)
        bot.send_message("–í–´ –í–´–ò–ì–†–ê–õ–ò –°–£–ü–ï–†–ì–û–ô–î–ê –ü–†–ò–ó!! –í–´–ò–ì–†–´–® –°–û–°–¢–ê–í–õ–Ø–ï–¢ 2000 –°–ê–¢–û–®.", event.peer_id)
    elif e1 == e2 and e2 == e3:
        db.add_coins(event.author_id, event.peer_id, 500)
        bot.send_message("–ü–æ–±–µ–¥–∞! –í–∞–º –ø—Ä–∏—Å—É–∂–¥–∞–µ—Ç—Å—è 500 —Å–∞—Ç–æ—à.", event.peer_id)

@bot.header("–°–ú–ï–ù–ê –ò–ú–ï–ù–ò")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def changer(event):
    coins = db.get_coins(event.author_id, event.peer_id)
    if coins < 1000:
        bot.send_message(f"–°—ä–µ–±–∏, –µ–±–∞–Ω–∞. (–£ –≤–∞—Å {coins} —Å–∞—Ç–æ—à–∏)", event.peer_id)
        return
    
    if len(event.message) >= 50:
        bot.send_message("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, –Ω–∞–¥–æ —É–∂–∞—Ç—å—Å—è –≤ 50 —Å–∏–º–≤–æ–ª–æ–≤, –µ–±–ª–∞–Ω.", event.peer_id)
        return

    db.sub_coins(event.author_id, event.peer_id, 1000)
    db.change_sec_name(event.author_id, event.message)
    bot.send_message("–°–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ –î–´–†–Ø–í–´–ô... –®—É—á—É. –ò–∑–º–µ–Ω–∏–ª –∏–º—è.", event.peer_id)

@bot.header("–°–ú–ï–ù–ê –§–ê–ú–ò–õ–ò–ò")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def changer(event):
    coins = db.get_coins(event.author_id, event.peer_id)
    if coins < 1000:
        bot.send_message(f"–ù–µ –º–∞—à–Ω–∏ –ø–µ—Ä–µ–¥–æ –º–Ω–æ–π –±–µ–∑ –±–∞–±–ª–∞. (–£ –≤–∞—Å {coins} —Å–∞—Ç–æ—à–∏)", event.peer_id)
        return
    
    if len(event.message) >= 50:
        bot.send_message("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è, –Ω–∞–¥–æ —É–∂–∞—Ç—å—Å—è –≤ 50 —Å–∏–º–≤–æ–ª–æ–≤, –µ–±–ª–∞–Ω.", event.peer_id)
        return
    
    db.sub_coins(event.author_id, event.peer_id, 1000)
    db.change_name(event.author_id, event.message)
    bot.send_message("–°–º–µ–Ω–∏–ª —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –î–û–õ–ë–ê–ï–ë... –®—É—á—É. –ò–∑–º–µ–Ω–∏–ª —Ñ–∞–º–∏–ª–∏—é.", event.peer_id)
    
@bot.by_callback_type(CallbackType.MARKET)
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def stats_check(event):
    chose = event.callback_payload["chose"]

    if db.get_coins(event.author_id, event.peer_id) < 1000:
        bot.edit_message("–ù–∏—â–µ–µ —Ç—ã —Ö—É–π–ª–æ, –æ—Ç—ä–µ–±–∏—Å—å –æ—Ç –º–µ–Ω—è.", event.callback_conv_msg_id, event.peer_id)
        return
    
    if chose == 1:
        bot.edit_message("–°–ú–ï–ù–ê –ò–ú–ï–ù–ò\n–ö–∞–∫–æ–µ –∏–º—è —Ö–æ—á–µ—à—å? –û—Ç–≤–µ—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å.", event.callback_conv_msg_id, event.peer_id)
    elif chose == 2:
        bot.edit_message("–°–ú–ï–ù–ê –§–ê–ú–ò–õ–ò–ò\n–ö–∞–∫—É—é —Ñ–∞–º–∏–ª–∏—é —Ö–æ—á–µ—à—å? –û—Ç–≤–µ—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å.", event.callback_conv_msg_id, event.peer_id)
    elif chose == 3:
        bot.edit_message("–£ –ë–û–ú–ñ–ê –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í", event.callback_conv_msg_id, event.peer_id)

@bot.on_reply_tag("—à–ª–µ–ø–Ω—É—Ç—å", "—à–ª—ë–ø–Ω—É—Ç—å", "–¥–∞—Ç—å –ø–æ –∂–æ–ø–µ")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def take_it(event):
    from random import choice
    
    user_1 = db.get_user(event.author_id)
    user_2 = db.get_user(event.reply_message[0])

    name_1 = user_1.name.capitalize()
    name_2 = user_2.name.capitalize()
    
    answers = [name_1 + " –¥–∞–ª –∂—ë—Å—Ç–∫–æ –ø–æ –∂–æ–ø–µ, —á—Ç–æ –∞–∂ " + name_2 + " –ø–æ–∫—Ä–∞—Å–Ω–µ–ª/–∞ –æ—Ç —Å—Ç—ã–¥–∞ –∏ –∑–ª–æ—Å—Ç–∏. –î–∞–ª—å—à–µ –æ–Ω–∏ —Ü–µ–ª–æ–≤–∞–ª–∏—Å—å –≤ –∑–∞—Å–æ—Å."]
    answers.append(name_1 + " –Ω–µ —Å–º–æ–≥ –ø–æ–ø–∞—Å—Ç—å –ø–æ –∂–æ–ø–µ " + name_2 + ", –∏–∑-–∑–∞ —á–µ–≥–æ " + name_2 + " –ø—Ä–æ–¥—ã—Ä—è–≤–∏–ª/–∞ –∂–æ–ø—É " + name_1)
    
    bot.send_message(choice(answers), event.peer_id)

@bot.tag(bot.bot_name, "–≥–æ—Ä–∫", "–ì–û–†–ö", "–ì–æ—Ä–∫")
async def gork(event):
    rest_msg = "".join(event.message.split()[1:])
    content = await openrouter_api.api.async_query(rest_msg)
    think = content.rfind("</think>")
    if think != -1:
       content = content[think + len("</think>"):]        
    bot.send_message(content, event.peer_id)
    await openrouter_api.cleanup()

@bot.new_message
def init_chat(event):
    if not db.is_chat_existing(event.peer_id):
        members = bot.get_raw_conversation_members(event.peer_id)
        db.init_database(event.peer_id, members)
    
@bot.new_message
def increment_msg_count(event):
    if not db.get_user(event.author_id).is_empty():
        db.increment_msg_count(event.author_id, event.peer_id)
        db.add_coins(event.author_id, event.peer_id, 1)

@bot.new_message
def check_membership(event):
    if db.get_user_chat(event.author_id, event.peer_id).is_empty():
        user = bot.get_raw_conversation_member(event.author_id, event.peer_id)
        is_admin = user["is_admin"] if "is_admin" in user else False
        is_owner = user["is_admin"] if "is_admin" in user else False
        db.add_user(user["id"], user["last_name"], user["first_name"], event.peer_id, is_admin=is_admin, is_owner=is_owner)

@bot.comand("/–∞–∫—Ç–∏–≤—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def top_users(event):
    
    def fancy_top(num, sec_name, name, msg_count):
        template = f"{name} {sec_name} –Ω–∞–ø–∏—Å–∞–ª {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
        fire = "üî•"; snowman = "‚õÑ"; flower = "üåº"; nl = "\n"
        if num == 1:
            return fire * 3 + template + fire * 3 + nl
        if num == 2:
            return snowman * 2 + template + snowman * 2 + nl
        if num == 3:
            return flower + template + flower + nl
        if num == 4:
            return "\n\nüòΩ–û–°–¢–ê–õ–¨–ù–´–ú –°–ü–ê–°–ò–ë–ö–ò –ó–ê –ê–ö–¢–ò–íüòΩ\n\n" + f"{str(num)}. " + template + nl

        return f"{str(num)}. " + template + nl

    
    mems = db.get_top_members(event.peer_id)
    ans = "üêíü¶Ñ –ù–ê–®–ò –¢–û–ü–û–í–´–ï –ê–ö–¢–ò–í–ß–ò–ö–ò ‚≠ê\n\n"
    for i in range(min(len(mems), 10)):
        vk_id = mems[i].vk_id; msg_count = mems[i].msg_count
        person = db.get_user(vk_id)
        ans += fancy_top(i + 1, person.sec_name, person.name, msg_count)

    bot.send_message(ans, event.peer_id)

@bot.comand("/–∞–¥–º–∏–Ω—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def admins(event):
    mems = db.get_admin_members(event.peer_id)
    ans = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n\n"
    for i in range(len(mems)):
        vk_id = mems[i].vk_id
        person = db.get_user(vk_id)
        ans += f"{i + 1}. {person.name} {person.sec_name}\n"
    
    bot.send_message(ans, event.peer_id)

@bot.comand("/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def owner(event):
    owner = db.get_owner(event.peer_id)
    if owner is None:
        bot.send_message("–û—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è –ø–∞–±–ª–∏–∫", event.peer_id)
        return
        
    ans = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: "
    vk_id = owner.vk_id
    person = db.get_user(vk_id)
    ans += f"{person.name} {person.sec_name}"
    
    bot.send_message(ans, event.peer_id)

@bot.comand("–∫—Ç–æ —è", "—Å—Ç–∞—Ç—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def who_am_i(event):
    base_info = db.get_user(event.author_id)
    user_chat_info = db.get_user_chat(event.author_id, event.peer_id)

    ans = "–°–¢–ê–¢–´\n"
    ans += "üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± " + base_info.name + " " + base_info.sec_name
    ans += "\n\n–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π " + str(user_chat_info.msg_count)
    if user_chat_info.is_owner:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!!!‚úç"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º...üò™"
    if user_chat_info.is_admin:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º!!!ü§©"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º...üò∞"
    ans += "\n–ò–º–µ–µ—Ç " + str(db.get_coins(event.author_id, event.peer_id)) + " —Å–∞—Ç–æ—à–∏"
    ans += "\n\n–°–º–µ–Ω–∏—Ç—å –∏–º—è. –¶–µ–Ω–∞ 1000 —Å–∞—Ç–æ—à–∏"
    ans += "\n–°–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é. –¶–µ–Ω–∞ 1000 —Å–∞—Ç–æ—à–∏"
    ans += "\n–°–¢–ê–¢–¨ –í–ò–ü. –¶–ï–ù–ê 100000 –°–ê–¢–û–®–ò"

    kbd = Keyboard(inline=True)
    kbd.add_callback_button("–°–º–µ–Ω–∏—Ç—å –∏–º—è", color=ButtonColor.PRIMARY, payload={"callback_type": CallbackType.MARKET, "chose": 1})
    kbd.add_line()
    kbd.add_callback_button("–°–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", color=ButtonColor.PRIMARY, payload={"callback_type": CallbackType.MARKET, "chose": 2})
    kbd.add_line()
    kbd.add_callback_button("–°—Ç–∞—Ç—å –≤–∏–ø", color=ButtonColor.PRIMARY, payload={"callback_type": CallbackType.MARKET, "chose": 3})
    
    bot.send_message(ans, event.peer_id, keyboard=kbd.get_keyboard())

@bot.on_reply_tag("–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π", "–∫—Ç–æ –µ—Å—Ç—å", "–∫–∞–∫–∞—è –º–∞—Å—Ç—å")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def who_are_you(event):
    if db.get_user(event.reply_message[0]).is_empty():
        return
    
    author_id = event.reply_message[0]
    if author_id < 0:
        bot.send_message("–¢—ã —á–µ –¥–æ –ø–∞–±–ª–∏–∫–∞ –¥–æ–µ–±–∞–ª—Å—è", event.peer_id)
        return
    
    base_info = db.get_user(author_id)
    user_chat_info = db.get_user_chat(author_id, event.peer_id)
    
    ans = ""
    ans += "üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± " + base_info.name + " " + base_info.sec_name
    ans += "\n\n–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π " + str(user_chat_info.msg_count)
    if user_chat_info.is_owner:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!!!‚úç"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º...üò™"
    if user_chat_info.is_admin:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º!!!ü§©"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º...üò∞"
    ans += "\n–ò–º–µ–µ—Ç " + str(db.get_coins(event.reply_message[0], event.peer_id)) + " —Å–∞—Ç–æ—à–∏"
    
    bot.send_message(ans, event.peer_id)
        
@bot.tag("–Ω—å—é—Å–∞—á", "—Ç–æ–ø–æ—Ä", "—É–Ω–∏–∞–Ω", "–ø–æ–∑–¥–Ω—è–∫–æ–≤", "–±–∞–µ–±—ã", "–±–∞—ë–±—ã") # TODO: fix index issue
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
async def send_tg_post(event):
    msg_list = event.message.lower().split()
    tag = msg_list[0]
    arg = msg_list[1] if len(msg_list) > 1 else None

    index = 0
    is_rand = False

    if arg is None:
        pass
    elif arg.isnumeric():
        index = int(arg)
    elif arg == "—Ä–∞–Ω–¥–æ–º":
        is_rand = True
    else:
        bot.send_message("–ë—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –î–∏–Ω–∞—Ö—É.", event.peer_id)
        return
    
    post = ""
    if tag == "–Ω—å—é—Å–∞—á":
        post = await tg.get_post("ru2ch", index, is_rand)
    elif tag == "—É–Ω–∏–∞–Ω":
        post = await tg.get_post("uniannet", index, is_rand)
    elif tag == "–±–∞–µ–±—ã" or tag == "–±–∞—ë–±—ã":
        post = await tg.get_post("dolbaepiss", index, is_rand)
    elif tag == "—Ç–æ–ø–æ—Ä":
        post = await tg.get_post(tg.convert_id(1237513492), index, is_rand)
    elif tag == "–ø–æ–∑–¥–Ω—è–∫–æ–≤":
        post = await tg.get_post(tg.convert_id(1732054517), index, is_rand)
    
    bot.send_message(post[0], event.peer_id, media_dir=post[1])

@bot.tag("sql")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def sql(event):
    if event.author_id == 766134059:
        rest_msg = event.message[len("sql")+1:]
        bot.send_message(str(db.query(rest_msg)), event.peer_id)

@bot.new_message
@throttle(interval_seconds=5.0)
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
async def process_yt(event):    
    from urllib.parse import urlparse, parse_qs, urlencode
    from urllib.request import urlopen
    from bs4 import BeautifulSoup
    import re
    
    def video_id(value):
        query = urlparse(value)
        if query.hostname == 'youtu.be':
            return query.path[1:]
        if query.hostname in ('www.youtube.com', 'youtube.com', 'm.youtube.com'):
            if query.path == '/watch':
                p = parse_qs(query.query)
                return p['v'][0]
            if query.path[:7] == '/embed/':
                return query.path.split('/')[2]
            if query.path[:3] == '/v/':
                return query.path.split('/')[2]
            if query.path[:8] == '/shorts/':
                return query.path.split('/')[2]
        return None

    def get_title(url: str):
        with urlopen(url) as response:
            response_text = response.read()
            data = response_text.decode()
            soup = BeautifulSoup(data, features="html.parser")
            title = soup.find_all(name="title")[0].text
            return title

    def download_image(url, vid):
        import os
        filename = os.getcwd() + "/" + vid + '.png'
        
        with urlopen(url) as response:
            f = open(filename, mode='wb')
            f.write(response.read())
            f.close()
        return filename
    
    msg = event.message
    url = re.search(r"(?P<url>https?://[^\s]+)", msg)
    if url != None and video_id(url.group("url")) != None:
        url = url.group("url")
        vid = video_id(url)

        title = get_title("https://www.youtube.com/watch?v=" + vid)
        filename = download_image("https://img.youtube.com/vi/" + vid + "/hqdefault.jpg", vid)

        bot.send_message(title, event.peer_id, media_dir=[filename])

    
if __name__ == "__main__":
    bot.run_forever()

from bot_interface import Bot
import error_handle as eh
import openrouter_api
import db, tg

bot = Bot()

@bot.comand("—Å—Ç–∞—Ä—Ç")
def hello(event):
    bot.send_message("–ü—Ä–∏–≤–µ—Ç", event.peer_id)

@bot.tag(bot.bot_name, "–≥–æ—Ä–∫", "–ì–û–†–ö")
async def gork(event):
    rest_msg = "".join(event.message.split()[1:])
    content = await openrouter_api.api.async_query(rest_msg)
    bot.send_message(content, event.peer_id)
    await openrouter_api.cleanup()

@bot.new_message
def init_chat(event):
    if not db.is_chat_existing(event.peer_id):
        members = bot.get_raw_conversation_members(event.peer_id)
        db.init_database(event.peer_id, members)
    
@bot.new_message
def increment_msg_count(event):
    db.increment_msg_count(event.author_id, event.peer_id)

@bot.comand("/–∞–∫—Ç–∏–≤—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def top_users(event):
    
    def fancy_top(num, sec_name, name, msg_count):
        template = f"{name} {sec_name} –Ω–∞–ø–∏—Å–∞–ª {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
        fire = "üî•"; snowman = "‚õÑ"; flower = "üåº"; nl = "\n"
        if num == 1:
            return fire * 3 + template + fire * 3 + nl
        if num == 2:
            return snowman * 2 + template + snowman * 2 + nl
        if num == 3:
            return flower + template + flower + nl
        if num == 4:
            return "\n\nüòΩ–û–°–¢–ê–õ–¨–ù–´–ú –°–ü–ê–°–ò–ë–ö–ò –ó–ê –ê–ö–¢–ò–íüòΩ\n\n" + f"{str(num)}. " + template + nl

        return f"{str(num)}. " + template + nl

    
    mems = db.get_top_members(event.peer_id)
    ans = "üêíü¶Ñ –ù–ê–®–ò –¢–û–ü–û–í–´–ï –ê–ö–¢–ò–í–ß–ò–ö–ò ‚≠ê\n\n"
    for i in range(min(len(mems), 10)):
        vk_id = mems[i].vk_id; msg_count = mems[i].msg_count
        person = db.get_user(vk_id)
        ans += fancy_top(i + 1, person.sec_name, person.name, msg_count)

    bot.send_message(ans, event.peer_id)

@bot.comand("/–∞–¥–º–∏–Ω—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def admins(event):
    mems = db.get_admin_members(event.peer_id)
    ans = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n\n"
    for i in range(len(mems)):
        vk_id = mems[i].vk_id
        person = db.get_user(vk_id)
        ans += f"{i + 1}. {person.name} {person.sec_name}\n"
    
    bot.send_message(ans, event.peer_id)

@bot.comand("/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def owner(event):
    owner = db.get_owner(event.peer_id)
    if owner is None:
        bot.send_message("–û—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è –ø–∞–±–ª–∏–∫", event.peer_id)
        return
        
    ans = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: "
    vk_id = owner.vk_id
    person = db.get_user(vk_id)
    ans += f"{person.name} {person.sec_name}"
    
    bot.send_message(ans, event.peer_id)

@bot.comand("–∫—Ç–æ —è")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def who_am_i(event):
    base_info = db.get_user(event.author_id)
    user_chat_info = db.get_user_chat(event.author_id, event.peer_id)

    ans = ""
    ans += "üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± " + base_info.sec_name + " " + base_info.name
    ans += "\n\n–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π " + str(user_chat_info.msg_count)
    if user_chat_info.is_owner:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!!!‚úç"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º...üò™"
    if user_chat_info.is_admin:
        ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º!!!ü§©"
    else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º...üò∞"
    
    bot.send_message(ans, event.peer_id)

@bot.on_reply
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
def who_are_you(event):
    author_id = event.reply_message[0]
    if author_id < 0:
        bot.send_message("–¢—ã —á–µ –¥–æ –ø–∞–±–ª–∏–∫–∞ –¥–æ–µ–±–∞–ª—Å—è", event.peer_id)
        return
    
    if event.message.lower() == "–∫—Ç–æ —Ç—ã":
        base_info = db.get_user(author_id)
        user_chat_info = db.get_user_chat(author_id, event.peer_id)

        ans = ""
        ans += "üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± " + base_info.sec_name + " " + base_info.name
        ans += "\n\n–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π " + str(user_chat_info.msg_count)
        if user_chat_info.is_owner:
            ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º!!!‚úç"
        else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º...üò™"
        if user_chat_info.is_admin:
            ans += "\n–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º!!!ü§©"
        else: ans += "\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º...üò∞"
        
        bot.send_message(ans, event.peer_id)
        
@bot.tag("–Ω—å—é—Å–∞—á", "—Ç–æ–ø–æ—Ä", "—É–Ω–∏–∞–Ω", "–ø–æ–∑–¥–Ω—è–∫–æ–≤", "–±–∞–µ–±—ã", "–±–∞—ë–±—ã")
@eh.handle_exception(default_response=eh.automatic_response, conn_error=eh.connection_response)
async def send_tg_post(event):
    msg_list = event.message.split()
    tag = msg_list[0]
    arg = msg_list[1]

    index = 1
    is_rand = False
    
    if arg.isnumeric():
        index = int(arg)
    elif arg == "—Ä–∞–Ω–¥–æ–º":
        is_rand = True
    else:
        bot.send_message("–ë—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –î–∏–Ω–∞—Ö—É.", event.peer_id)
        return
    
    post = ""
    if tag == "–Ω—å—é—Å–∞—á":
        post = await tg.get_post("ru2ch", index, is_rand)
    elif tag == "—É–Ω–∏–∞–Ω":
        post = await tg.get_post("uniannet", index, is_rand)
    elif tag == "–±–∞–µ–±—ã" or tag == "–±–∞—ë–±—ã":
        post = await tg.get_post("dolbaepiss", index, is_rand)
    elif tag == "—Ç–æ–ø–æ—Ä":
        post = await tg.get_post(tg.convert_id(1237513492), index, is_rand)
    elif tag == "–ø–æ–∑–¥–Ω—è–∫–æ–≤":
        post = await tg.get_post(tg.convert_id(1732054517), index, is_rand)
    
    bot.send_message(post, event.peer_id)
    
if __name__ == "__main__":
    bot.run_forever()

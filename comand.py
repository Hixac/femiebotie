import db
import asyncio
import random
from config import TG_API_ID, TG_API_HASH, TG_PHONE
from telethon import TelegramClient
from telethon.tl.types import PeerChannel
from openrouter_api import api

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
_tg_client = None

async def get_tg_client():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Telegram —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _tg_client
    if _tg_client is None:
        _tg_client = TelegramClient('rofls', TG_API_ID, TG_API_HASH)
        await _tg_client.start(phone=TG_PHONE)
    return _tg_client

async def async_get_post(name, index=1, is_rand=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞"""
    if not isinstance(is_rand, bool):
        raise ValueError("is_rand must be boolean")
    if not isinstance(index, int):
        raise ValueError("index must be integer")
    
    client = await get_tg_client()
    channel = await client.get_entity(name)
    
    if is_rand:
        messages = []
        async for msg in client.iter_messages(channel, limit=100):
            if msg.text:
                messages.append(msg.text)
        return random.choice(messages) if messages else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    messages = []
    async for msg in client.iter_messages(channel, limit=index):
        if msg.text:
            messages.append(msg.text)
    return messages[-1] if messages else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π"

async def gork(msg, event, bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã gork"""
    if not isinstance(msg, str):
        raise ValueError("msg must be string")
    
    reply = ""
    if event.reply_message:
        reply = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: \"{event.reply_message}\""
    
    content = await api.async_query(msg + reply)
    bot.send_message(content, event.peer_id)

async def axe(name, event, bot, index=1, is_rand=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã axe"""
    post = await async_get_post(name, index, is_rand)
    bot.send_message(post, event.peer_id)

async def fancy_top(num, sec_name, name, msg_count):
    template = f"{name} {sec_name} –Ω–∞–ø–∏—Å–∞–ª {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
    fire = "üî•"; snowman = "‚õÑ"; flower = "üåº"; nl = "\n"
    if num == 1:
        return fire * 3 + template + fire * 3 + nl
    if num == 2:
        return snowman * 2 + template + snowman * 2 + nl
    if num == 3:
        return flower + template + flower + nl
    if num == 4:
        return "\n\nüòΩ–û–°–¢–ê–õ–¨–ù–´–ú –°–ü–ê–°–ò–ë–ö–ò –ó–ê –ê–ö–¢–ò–íüòΩ\n\n" + f"{str(num)}. " + template + nl

    return f"{str(num)}. " + template + nl
    
async def get_top_members(bot, peer_id):
    mems = db.get_top_members(peer_id)
    ans = "üêíü¶Ñ –ù–ê–®–ò –¢–û–ü–û–í–´–ï –ê–ö–¢–ò–í–ß–ò–ö–ò ‚≠ê\n\n"
    for i in range(10):
        vk_id = mems[i][1]; msg_count = mems[i][3]
        person = db.get_user(vk_id)
        ans += await fancy_top(i + 1, person[1], person[2], msg_count)
    
    bot.send_message(ans, peer_id)
    
async def tag(event, bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥"""
    if not event.message:
        return
    
    try:
        msg = event.message.strip()
        if not msg:
            return
        
        parts = msg.split(maxsplit=1)
        tag = parts[0].lstrip("@").rstrip(",").lower()
        rest_msg = parts[1] if len(parts) > 1 else ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã gork
        if tag == "gork" or tag == "–≥–æ—Ä–∫":
            await gork(rest_msg, event, bot)
            return

        if tag == "–∞–∫—Ç–∏–≤—ã":
            await get_top_members(bot, event.peer_id)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥
        is_rand = rest_msg.lower() == "—Ä–∞–Ω–¥–æ–º"
        index = 1
        if rest_msg.isdigit():
            index = int(rest_msg)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–∞–Ω–∞–ª–æ–≤
        if tag == "—Ç–æ–ø–æ—Ä":
            await axe(PeerChannel(1237513492), event, bot, index, is_rand)
        elif tag == "–Ω—å—é—Å–∞—á":
            await axe("ru2ch", event, bot, index, is_rand)
        elif tag == "—É–Ω–∏–∞–Ω":
            await axe("uniannet", event, bot, index, is_rand)
        elif tag == "–ø–æ–∑–¥–Ω—è–∫–æ–≤":
            await axe(PeerChannel(1732054517), event, bot, index, is_rand)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        bot.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", event.peer_id)
